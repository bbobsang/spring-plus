plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.sparta'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(19)
    }
}

repositories {
    mavenCentral() // Maven Central Repository 사용
}

dependencies {

    // Spring Boot 관련 의존성
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-test'

    // Lombok 의존성
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // 데이터베이스 관련 의존성
    runtimeOnly 'com.h2database:h2:2.1.214'
    runtimeOnly 'com.mysql:mysql-connector-j'

    // 비밀번호 암호화 라이브러리
    implementation 'at.favre.lib:bcrypt:0.10.2' // bcrypt 라이브러리 (비밀번호 암호화)

    // JWT 관련 의존성 (JSON Web Token)
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5' // JWT API
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5' // JWT 구현체
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5' // JWT Jackson 라이브러리

    // QueryDSL 의존성

    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    tasks.named('test') {
        useJUnitPlatform() // JUnit Platform 사용
    }

    bootJar {
        archiveFileName = 'spring-plus.jar'  // 출력될 JAR 파일 이름
        mainClass = 'org.example.expert.ExpertApplication'  // 메인 클래스 경로 설정
    }
}
def querydslSrcDir = 'src/main/generated'
clean {
    delete file(querydslSrcDir)
}
tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

